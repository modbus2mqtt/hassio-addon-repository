import { Ientity, ImodbusEntity, Ispecification } from '@modbus2mqtt/specification.shared';
import { Islave, PollModes } from './types';
export interface IEntityCommandTopics {
    entityId: number;
    commandTopic: string;
    modbusCommandTopic?: string;
}
export declare class Slave {
    private busid;
    private slave;
    private mqttBaseTopic;
    constructor(busid: number, slave: Islave, mqttBaseTopic: string);
    getStateTopic(): string;
    hasRootTopic(): boolean;
    getBaseTopic(): string;
    getTriggerPollTopic(): string;
    getEntityCommandTopic(entity?: Ientity): IEntityCommandTopics | undefined;
    getEntityCommandTopicFilter(): string;
    getNoDiscoverEntities(): number[];
    getNoDiscovery(): boolean;
    getCommandTopic(): string | undefined;
    getEntityFromCommandTopic(topic: String): Ientity | undefined;
    getAvailabilityTopic(): string;
    getStatePayload(entities: ImodbusEntity[], defaultValue?: string | null): string;
    getBusId(): number;
    getSlaveId(): number;
    getName(): string | undefined;
    getQos(): number | undefined;
    getPollMode(): PollModes | undefined;
    static compareSlaves(s1: Slave, s2: Slave): number;
    getKey(): string;
    getSpecification(): Ispecification | undefined;
    setSpecification(spec: Ispecification | undefined): void;
    getSpecificationId(): string | undefined;
    clone(): Slave;
}
