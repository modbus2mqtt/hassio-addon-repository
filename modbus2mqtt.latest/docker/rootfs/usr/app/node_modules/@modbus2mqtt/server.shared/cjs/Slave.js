"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slave = void 0;
var tslib_1 = require("tslib");
var Slave = /** @class */ (function () {
    function Slave(busid, slave, mqttBaseTopic) {
        this.busid = busid;
        this.slave = slave;
        this.mqttBaseTopic = mqttBaseTopic;
    }
    Slave.prototype.getStateTopic = function () {
        return this.getBaseTopic() + '/state/';
    };
    Slave.prototype.hasRootTopic = function () {
        return this.slave.rootTopic != undefined;
    };
    Slave.prototype.getBaseTopic = function () {
        if (this.hasRootTopic())
            return this.mqttBaseTopic + '/' + this.slave.rootTopic;
        else
            return this.mqttBaseTopic + '/' + this.busid + 's' + this.slave.slaveid;
    };
    Slave.prototype.getTriggerPollTopic = function () {
        return this.getBaseTopic() + '/triggerPoll/';
    };
    Slave.prototype.getEntityCommandTopic = function (entity) {
        var commandTopic = undefined;
        var modbusCommandTopic = undefined;
        if (entity)
            if (!entity.readonly) {
                commandTopic = this.getBaseTopic() + '/' + entity.mqttname + '/set/';
                if (entity.converter.name == 'select')
                    modbusCommandTopic = this.getBaseTopic() + '/' + entity.mqttname + '/set/modbus/';
                return {
                    entityId: entity.id,
                    commandTopic: commandTopic ? commandTopic : 'error',
                    modbusCommandTopic: modbusCommandTopic ? modbusCommandTopic : undefined,
                };
            }
        return undefined;
    };
    Slave.prototype.getEntityCommandTopicFilter = function () {
        return this.getBaseTopic() + '/+/set/#';
    };
    Slave.prototype.getNoDiscoverEntities = function () {
        return this.slave.noDiscoverEntities ? this.slave.noDiscoverEntities : [];
    };
    Slave.prototype.getNoDiscovery = function () {
        return this.slave.noDiscovery == undefined ? false : this.slave.noDiscovery;
    };
    Slave.prototype.getCommandTopic = function () {
        var _a;
        var commandTopic = undefined;
        var modbusCommandTopic = undefined;
        if ((_a = this.getSpecification()) === null || _a === void 0 ? void 0 : _a.entities.find(function (e) { return !e.readonly; })) {
            commandTopic = this.getBaseTopic() + '/set/';
            return commandTopic;
        }
        return undefined;
    };
    Slave.prototype.getEntityFromCommandTopic = function (topic) {
        var commandTopic = undefined;
        var modbusCommandTopic = undefined;
        var start = this.getBaseTopic().length;
        var idx = topic.indexOf('/', start + 1);
        var mqttname = topic.substring(start + 1, idx >= 0 ? idx : undefined);
        var path = mqttname.split('/');
        if (path.length > 0) {
            if (this.slave.specification && this.slave.specification.entities) {
                return this.slave.specification.entities.find(function (e) { return e.mqttname == path[0]; });
            }
        }
        return undefined;
    };
    Slave.prototype.getAvailabilityTopic = function () {
        return this.getBaseTopic() + '/availability/';
    };
    Slave.prototype.getStatePayload = function (entities, defaultValue) {
        var e_1, _a;
        if (defaultValue === void 0) { defaultValue = null; }
        var o = {};
        try {
            for (var entities_1 = tslib_1.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                var e = entities_1_1.value;
                if (e.mqttname != undefined && e.mqttname.length > 0 && e.variableConfiguration == undefined) {
                    o[e.mqttname] = e.mqttValue != undefined ? e.mqttValue : defaultValue;
                    if (e.converter.name == 'select') {
                        if (o.modbusValues == undefined)
                            o.modbusValues = {};
                        if (e.modbusValue != undefined && e.modbusValue.length > 0)
                            o.modbusValues[e.mqttname] = e.modbusValue[0];
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return JSON.stringify(o, null, '\t');
    };
    Slave.prototype.getBusId = function () {
        return this.busid;
    };
    Slave.prototype.getSlaveId = function () {
        return this.slave.slaveid;
    };
    Slave.prototype.getName = function () {
        return this.slave.name;
    };
    Slave.prototype.getQos = function () {
        return this.slave.qos;
    };
    Slave.prototype.getPollMode = function () {
        return this.slave.pollMode;
    };
    Slave.compareSlaves = function (s1, s2) {
        var rc = s1.busid - s2.busid;
        if (!rc) {
            rc = s1.slave.slaveid - s2.slave.slaveid;
        }
        return rc;
    };
    Slave.prototype.getKey = function () {
        return this.busid + 's' + this.slave.slaveid;
    };
    Slave.prototype.getSpecification = function () {
        if (this.slave && this.slave.specification && this.slave.specification.entities)
            return this.slave.specification;
        return undefined;
    };
    Slave.prototype.setSpecification = function (spec) {
        if (this.slave) {
            this.slave.specification = spec;
        }
    };
    Slave.prototype.getSpecificationId = function () {
        if (this.slave && this.slave.specificationid)
            return this.slave.specificationid;
        return undefined;
    };
    Slave.prototype.clone = function () {
        return new Slave(this.busid, structuredClone(this.slave), this.mqttBaseTopic);
    };
    return Slave;
}());
exports.Slave = Slave;
//# sourceMappingURL=Slave.js.map