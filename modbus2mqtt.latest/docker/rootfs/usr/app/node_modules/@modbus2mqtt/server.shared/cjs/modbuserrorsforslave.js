"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModbusErrorsForSlave = void 0;
var ModbusErrorsForSlave = /** @class */ (function () {
    function ModbusErrorsForSlave(slaveid, modbusErrorForSlave) {
        this.slaveid = slaveid;
        if (!modbusErrorForSlave)
            this.modbusErrors = {
                errors: [],
                totalErrorCount: 0,
                errorsSinceLastSuccessful: 0,
                lastErrorTime: 0,
                allEntitiesFailed: false,
                lastAllEntitiesFailedTime: 0,
                lastSuccessfulIdentifiedTime: 0,
                notIdentifiedEntities: [],
                lastAllEntitiesFailedSinceLastSuccessful: 0,
                lastIdentifiedSinceLastSuccessful: 0
            };
        else
            this.modbusErrors = modbusErrorForSlave;
    }
    ModbusErrorsForSlave.getModbusErrors = function (mSpec) {
        var count = [];
        mSpec.entities.forEach(function (ent) {
            if (ent.modbusError) {
                count.push({ entityId: ent.id,
                    message: ent.modbusError });
            }
        });
        return count;
    };
    ModbusErrorsForSlave.prototype.setErrors = function (spec) {
        var errors = ModbusErrorsForSlave.getModbusErrors(spec);
        var now = Date.now();
        if (errors.length > 0) {
            if (errors.length > 0)
                this.modbusErrors.errorsSinceLastSuccessful++;
            this.modbusErrors.lastErrorTime = now;
            this.modbusErrors.errors = errors;
            this.modbusErrors.allEntitiesFailed = (errors.length == spec.entities.length);
            if (this.modbusErrors.allEntitiesFailed) {
                this.modbusErrors.lastAllEntitiesFailedSinceLastSuccessful++;
                this.modbusErrors.lastAllEntitiesFailedTime = now;
            }
            this.modbusErrors.totalErrorCount++;
        }
        else {
            this.modbusErrors.lastAllEntitiesFailedSinceLastSuccessful = 0;
            this.modbusErrors.allEntitiesFailed = false;
            this.modbusErrors.errorsSinceLastSuccessful = 0;
            this.modbusErrors.errors = [];
        }
        if (spec.identified) {
            this.modbusErrors.lastSuccessfulIdentifiedTime = now;
            this.modbusErrors.lastIdentifiedSinceLastSuccessful = 0;
        }
        else {
            this.modbusErrors.lastIdentifiedSinceLastSuccessful++;
            this.modbusErrors.notIdentifiedEntities = errors.map(function (e) { return e.entityId; });
        }
    };
    ModbusErrorsForSlave.prototype.get = function () {
        return this.modbusErrors;
    };
    return ModbusErrorsForSlave;
}());
exports.ModbusErrorsForSlave = ModbusErrorsForSlave;
//# sourceMappingURL=modbuserrorsforslave.js.map