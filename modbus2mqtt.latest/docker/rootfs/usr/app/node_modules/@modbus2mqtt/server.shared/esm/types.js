export var HttpErrorsEnum;
(function (HttpErrorsEnum) {
    HttpErrorsEnum[HttpErrorsEnum["OK"] = 200] = "OK";
    HttpErrorsEnum[HttpErrorsEnum["OkCreated"] = 201] = "OkCreated";
    HttpErrorsEnum[HttpErrorsEnum["OkAccepted"] = 202] = "OkAccepted";
    HttpErrorsEnum[HttpErrorsEnum["OkNonAuthoritativeInformation"] = 203] = "OkNonAuthoritativeInformation";
    HttpErrorsEnum[HttpErrorsEnum["OkNoContent"] = 204] = "OkNoContent";
    HttpErrorsEnum[HttpErrorsEnum["ErrBadRequest"] = 400] = "ErrBadRequest";
    HttpErrorsEnum[HttpErrorsEnum["ErrUnauthorized"] = 401] = "ErrUnauthorized";
    HttpErrorsEnum[HttpErrorsEnum["ErrForbidden"] = 403] = "ErrForbidden";
    HttpErrorsEnum[HttpErrorsEnum["ErrNotFound"] = 404] = "ErrNotFound";
    HttpErrorsEnum[HttpErrorsEnum["ErrNotAcceptable"] = 406] = "ErrNotAcceptable";
    HttpErrorsEnum[HttpErrorsEnum["ErrRequestTimeout"] = 408] = "ErrRequestTimeout";
    HttpErrorsEnum[HttpErrorsEnum["ErrInvalidParameter"] = 422] = "ErrInvalidParameter";
    HttpErrorsEnum[HttpErrorsEnum["SrvErrInternalServerError"] = 500] = "SrvErrInternalServerError";
})(HttpErrorsEnum || (HttpErrorsEnum = {}));
export var RoutingNames;
(function (RoutingNames) {
    RoutingNames["login"] = "login";
    RoutingNames["register"] = "register";
    RoutingNames["configure"] = "configure";
    RoutingNames["busses"] = "busses";
    RoutingNames["specifications"] = "specifications";
    RoutingNames["slaves"] = "slaves";
    RoutingNames["specification"] = "specification";
})(RoutingNames || (RoutingNames = {}));
export var PollModes;
(function (PollModes) {
    PollModes[PollModes["intervall"] = 0] = "intervall";
    PollModes[PollModes["trigger"] = 1] = "trigger";
    PollModes[PollModes["intervallAndTrigger"] = 2] = "intervallAndTrigger";
    PollModes[PollModes["noPoll"] = 3] = "noPoll";
})(PollModes || (PollModes = {}));
export var AuthenticationErrors;
(function (AuthenticationErrors) {
    AuthenticationErrors[AuthenticationErrors["EnvironmentVariableSecretNotSet"] = 1] = "EnvironmentVariableSecretNotSet";
    AuthenticationErrors[AuthenticationErrors["HashError"] = 2] = "HashError";
    AuthenticationErrors[AuthenticationErrors["InvalidUserPasswordCombination"] = 3] = "InvalidUserPasswordCombination";
    AuthenticationErrors[AuthenticationErrors["InvalidParameters"] = 4] = "InvalidParameters";
    AuthenticationErrors[AuthenticationErrors["SignError"] = 5] = "SignError";
})(AuthenticationErrors || (AuthenticationErrors = {}));
export function getConnectionName(connection) {
    if (connection.baudrate) {
        var c = connection;
        return 'RTU: ' + c.serialport + '(' + c.baudrate + ') t: ' + c.timeout;
    }
    else {
        var c = connection;
        return 'TCP: ' + c.host + ':' + c.port + ' t: ' + (c.timeout ? c.timeout : 100);
    }
}
//# sourceMappingURL=types.js.map