import { ImodbusValues } from '@modbus2mqtt/specification';
import { ImodbusAddress, IQueueOptions, ModbusRTUQueue } from './ModbusRTUQueue';
export interface IexecuteOptions extends IQueueOptions {
    printLogs?: boolean;
    task?: string;
}
export declare class ModbusRTUProcessor {
    private queue;
    private static lastNoticeMessageTime;
    private static lastNoticeMessage;
    constructor(queue: ModbusRTUQueue);
    private prepare;
    private logNotice;
    /**
     * if timeout retry
     * if connection is RTU and any other error: reconnect then continue
     * if CRC error retry
     * if retried and length > 1 => split addresses and requeue
     * store error for
     * @param currentEntry
     * @param error
     * @returns true if the error was handled
     */
    private errorHandler;
    private countResults;
    private countAddresses;
    execute(slaveId: number, addresses: Set<ImodbusAddress>, options?: IexecuteOptions): Promise<ImodbusValues>;
}
