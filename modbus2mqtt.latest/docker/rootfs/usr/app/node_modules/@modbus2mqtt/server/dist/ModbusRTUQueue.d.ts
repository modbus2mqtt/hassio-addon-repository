import { ModbusRegisterType } from '@modbus2mqtt/specification.shared';
import { ReadRegisterResultWithDuration } from './bus';
import { ReadRegisterResult } from 'modbus-serial/ModbusRTU';
export interface ImodbusAddress {
    address: number;
    registerType: ModbusRegisterType;
    write?: ReadRegisterResult;
    length?: number;
}
export declare enum ModbusErrorStates {
    timeout = 0,
    crc = 1,
    other = 2
}
export interface IQueueEntry {
    slaveId: number;
    address: ImodbusAddress;
    onResolve: (result?: ReadRegisterResultWithDuration) => void;
    onError: (queueEntry: IQueueEntry, e: any) => void;
    errorState?: ModbusErrorStates;
    options?: IQueueOptions;
}
export interface IQueueOptions {
    useCache?: boolean;
}
export declare class ModbusRTUQueue {
    private eventEmitter;
    private list;
    constructor();
    retry(entry: IQueueEntry): void;
    enqueue(slaveId: number, address: ImodbusAddress, onResolve: (result?: ReadRegisterResultWithDuration) => void, onError: (queueEntry: IQueueEntry, e: any) => void, options?: IQueueOptions): void;
    dequeue(): IQueueEntry | undefined;
    addNewEntryListener(listener: () => void): void;
    addCachedEntryListener(listener: (entry: IQueueEntry) => void): void;
    clear(): void;
    getEntries(): IQueueEntry[];
    getLength(): number;
}
