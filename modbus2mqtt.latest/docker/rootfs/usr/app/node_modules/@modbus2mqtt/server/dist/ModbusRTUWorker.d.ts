import { ReadRegisterResult } from 'modbus-serial/ModbusRTU';
import { ReadRegisterResultWithDuration } from './bus';
import { ModbusRTUQueue } from './ModbusRTUQueue';
import { ModbusWorker } from './ModbusWorker';
type TModbusReadFunction = (slaveid: number, dataaddress: number, length: number) => Promise<ReadRegisterResultWithDuration>;
type TModbusWriteFunction = (slaveid: number, dataaddress: number, data: ReadRegisterResult) => Promise<void>;
export interface IModbusAPI {
    readHoldingRegisters: TModbusReadFunction;
    readCoils: TModbusReadFunction;
    readDiscreteInputs: TModbusReadFunction;
    readInputRegisters: TModbusReadFunction;
    writeHoldingRegisters: TModbusWriteFunction;
    writeCoils: TModbusWriteFunction;
}
export declare class ModbusRTUWorker extends ModbusWorker {
    private isRunning;
    constructor(modbusAPI: IModbusAPI, queue: ModbusRTUQueue);
    run(): void;
    onFinish(): void;
}
export {};
