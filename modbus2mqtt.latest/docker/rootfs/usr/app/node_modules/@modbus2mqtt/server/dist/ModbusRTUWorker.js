"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModbusRTUWorker = void 0;
const ModbusWorker_1 = require("./ModbusWorker");
class ModbusRTUWorker extends ModbusWorker_1.ModbusWorker {
    constructor(modbusAPI, queue) {
        super(modbusAPI, queue);
        this.isRunning = false;
    }
    run() {
        if (!this.isRunning && this.queue.getLength() > 0) {
            this.isRunning = true;
            let processing = this.queue.getEntries();
            this.queue.clear();
            // process all queue entries sequentially:
            processing
                .reduce((promise, current) => {
                return new Promise((resolve, reject) => {
                    promise
                        .then(() => {
                        if (current.address.write)
                            return this.functionCodeWriteMap.get(current.address.registerType)(current.slaveId, current.address.address, current.address.write)
                                .then(() => {
                                current.onResolve();
                                resolve();
                            })
                                .catch((e) => {
                                current.onError(current, e);
                                resolve();
                            });
                        else
                            return this.functionCodeReadMap.get(current.address.registerType)(current.slaveId, current.address.address, current.address.length == undefined ? 1 : current.address.length)
                                .then((result) => {
                                current.onResolve(result);
                                resolve();
                            })
                                .catch((e) => {
                                current.onError(current, e);
                                resolve();
                            });
                    })
                        .catch(reject);
                });
            }, new Promise((resolve) => {
                resolve();
            }))
                .then(() => {
                if (this.queue.getLength() == 0) {
                    this.isRunning = false;
                    this.onFinish();
                }
                else {
                    this.isRunning = false;
                    this.run();
                }
            });
        }
    }
    onFinish() { }
}
exports.ModbusRTUWorker = ModbusRTUWorker;
//# sourceMappingURL=ModbusRTUWorker.js.map