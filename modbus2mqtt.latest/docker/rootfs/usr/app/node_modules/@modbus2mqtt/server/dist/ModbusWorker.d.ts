import { ReadRegisterResult } from 'modbus-serial/ModbusRTU';
import { ReadRegisterResultWithDuration } from './bus';
import { ModbusRTUQueue } from './ModbusRTUQueue';
import { ModbusRegisterType } from '@modbus2mqtt/specification.shared';
type TModbusReadFunction = (slaveid: number, dataaddress: number, length: number) => Promise<ReadRegisterResultWithDuration>;
type TModbusWriteFunction = (slaveid: number, dataaddress: number, data: ReadRegisterResult) => Promise<void>;
export interface IModbusAPI {
    readHoldingRegisters: TModbusReadFunction;
    readCoils: TModbusReadFunction;
    readDiscreteInputs: TModbusReadFunction;
    readInputRegisters: TModbusReadFunction;
    writeHoldingRegisters: TModbusWriteFunction;
    writeCoils: TModbusWriteFunction;
}
export declare class ModbusWorker {
    private modbusAPI;
    protected queue: ModbusRTUQueue;
    protected functionCodeReadMap: Map<ModbusRegisterType, TModbusReadFunction>;
    protected functionCodeWriteMap: Map<ModbusRegisterType, TModbusWriteFunction>;
    private modbusClient;
    constructor(modbusAPI: IModbusAPI, queue: ModbusRTUQueue);
    /**
     * If entry is for readind: searchs for entry in cache. If not found, it forwards entry to queue
     * @param entry: Entry to search in cache
     */
    private getCached;
    run(): void;
}
export {};
