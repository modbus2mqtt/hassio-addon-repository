import stream from 'stream';
import * as http from 'http';
import { ImqttClient, Iconfiguration, IUserAuthenticationStatus } from '@modbus2mqtt/server.shared';
declare global {
    namespace NodeJS {
        interface ProcessEnv {
            HASSIO_TOKEN: string;
        }
    }
}
export declare enum MqttValidationResult {
    OK = 0,
    tokenExpired = 1,
    error = 2
}
export declare enum ConfigListenerEvent {
    addSlave = 0,
    deleteSlave = 1,
    updateSlave = 2,
    deleteBus = 3
}
export declare const filesUrlPrefix = "specifications/files";
export declare class Config {
    static tokenExpiryTime: number;
    static mqttHassioLoginData: ImqttClient | undefined;
    static login(name: string, password: string): Promise<string>;
    static register(name: string | undefined, password: string | undefined, noAuthentication: boolean): Promise<void>;
    static validateUserToken(token: string | undefined): MqttValidationResult;
    static getPublicDir(): string;
    static getLocalDir(): string;
    private static config;
    private static secret;
    private static specificationsChanged;
    private static newConfig;
    static yamlDir: string;
    static sslDir: string;
    static getSecret(pathStr: string): string;
    static getConfiguration(): Iconfiguration;
    static getAuthStatus(): IUserAuthenticationStatus;
    readGetResponse(res: http.IncomingMessage): Promise<any>;
    static executeHassioGetRequest<T>(url: string, next: (_dev: T) => void, reject: (error: any) => void): void;
    validateHassioToken(hassiotoken: string, next: () => void, reject: () => void): void;
    private static readCertfile;
    static updateMqttTlsConfig(config: Iconfiguration): void;
    private getMqttLoginFromHassio;
    getMqttConnectOptions(): Promise<ImqttClient>;
    static isMqttConfigured(mqttClient: ImqttClient): boolean;
    readYamlAsync(): Promise<void>;
    readYaml(): void;
    writeConfiguration(config: Iconfiguration): void;
    static getConfigPath(): string;
    getSecretsPath(): string;
    static setFakeModbus(newMode: boolean): void;
    static getFileNameFromSlaveId(slaveid: number): string;
    static createZipFromLocal(_filename: string, r: stream.Writable): Promise<void>;
}
export declare function getSpecificationImageOrDocumentUrl(rootUrl: string | undefined, specName: string, url: string): string;
