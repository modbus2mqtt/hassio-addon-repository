import { IBus, IModbusConnection, Islave, Slave } from '@modbus2mqtt/server.shared';
import { ConfigListenerEvent } from './config';
export declare class ConfigBus {
    private static busses;
    private static listeners;
    static addListener(event: ConfigListenerEvent, listener: ((arg: Slave) => void) | ((arg: number) => void)): void;
    private static emitSlaveEvent;
    private static emitBusEvent;
    static getBussesProperties(): IBus[];
    static readBusses(): void;
    getInstance(): ConfigBus;
    static addBusProperties(connection: IModbusConnection): IBus;
    static updateBusProperties(bus: IBus, connection: IModbusConnection): IBus;
    static deleteBusProperties(busid: number): void;
    static filterAllslaves<T>(busid: number, specFunction: <T>(slave: Islave) => Set<T> | any): Promise<Set<T>>;
    private static getslavePath;
    static writeslave(busid: number, slave: Islave): Islave;
    static getSlave(busid: number, slaveid: number): Islave | undefined;
    static getslaveBySlaveId(busid: number, slaveId: number): Islave | undefined;
    static deleteSlave(busid: number, slaveid: number): void;
    private static listDevicesUdev;
    private static grepDevices;
    private static listDevicesHassio;
    static listDevices(next: (devices: string[]) => void, reject: (error: any) => void): void;
}
