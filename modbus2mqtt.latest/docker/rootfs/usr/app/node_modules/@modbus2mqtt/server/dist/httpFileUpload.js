"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipStorage = exports.fileStorage = void 0;
exports.getFilenameForUpload = getFilenameForUpload;
const tslib_1 = require("tslib");
const multer = tslib_1.__importStar(require("multer"));
const config_1 = require("./config");
const path_1 = require("path");
const fs = tslib_1.__importStar(require("fs"));
const specification_1 = require("@modbus2mqtt/specification");
const log = new specification_1.Logger('httpFileUpload');
function getFilenameForUpload(filename) {
    return filename && filename.length > 0 ? filename : '_new';
}
exports.fileStorage = multer.diskStorage({
    destination: (request, _file, callback) => {
        let fileLocation = config_1.Config.getConfiguration().filelocation;
        if (fileLocation == undefined) {
            log.log(specification_1.LogLevelEnum.error, 'Config.fileLocation is not defined. NO file upload possible');
        }
        else if (request.query.specification !== null) {
            let dir = (0, config_1.getSpecificationImageOrDocumentUrl)((0, path_1.join)(fileLocation, 'local'), getFilenameForUpload(request.query.specification), '');
            if (!fs.existsSync(dir))
                fs.mkdirSync(dir, { recursive: true });
            callback(null, dir);
        }
        else
            callback(new Error('No parameter specification found'), fileLocation);
    },
    filename: (_req, file, callback) => {
        callback(null, file.originalname);
    },
});
exports.zipStorage = multer.diskStorage({
    destination: (request, _file, callback) => {
        callback(null, fs.mkdtempSync('zip'));
    },
    filename: (_req, file, callback) => {
        callback(null, file.originalname);
    },
});
//# sourceMappingURL=httpFileUpload.js.map