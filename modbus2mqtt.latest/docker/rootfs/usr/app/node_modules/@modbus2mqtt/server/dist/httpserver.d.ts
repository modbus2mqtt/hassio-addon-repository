import * as http from 'http';
import { Request } from 'express';
import { HttpErrorsEnum } from '@modbus2mqtt/specification.shared';
import { HttpServerBase } from './httpServerBase';
interface GetRequestWithParameter extends Request {
    query: {
        name: string;
        usecache: string;
        timeout: string;
        busid: string;
        slaveid: string;
        spec: string;
        filter: string;
        discover: string;
        entityid: string;
        language: string;
        originalFilename: string;
        password: string;
        mqttValue: string;
        forContribution: string;
        showAllPublicSpecs: string;
    };
}
export declare class HttpServer extends HttpServerBase {
    constructor(angulardir?: string);
    returnResult(req: Request, res: http.ServerResponse, code: HttpErrorsEnum, message: string, object?: any): void;
    handleSlaveTopics(req: Request, res: http.ServerResponse, next: any): any;
    modbusCacheAvailable: boolean;
    setModbusCacheAvailable(): void;
    initApp(): void;
    checkBusidSlaveidParameter(req: GetRequestWithParameter): string;
    validateMqttConnectionResult(req: Request, res: http.ServerResponse, valid: boolean, message: string): void;
}
export {};
