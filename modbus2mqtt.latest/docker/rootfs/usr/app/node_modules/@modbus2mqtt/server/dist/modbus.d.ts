import { ImodbusSpecification, Ispecification } from '@modbus2mqtt/specification.shared';
import { Ientity, ImodbusEntity } from '@modbus2mqtt/specification.shared';
import { Observable, Subject } from 'rxjs';
import { Bus } from './bus';
import { IfileSpecification } from '@modbus2mqtt/specification';
import { ReadRegisterResult } from 'modbus-serial/ModbusRTU';
export declare class Modbus {
    constructor();
    static writeEntityModbus(bus: Bus, slaveid: number, entity: Ientity, modbusValue: ReadRegisterResult): Promise<void>;
    static writeEntityMqtt(bus: Bus, slaveid: number, spec: Ispecification, entityid: number, mqttValue: string): Promise<void>;
    readEntityFromModbus(bus: Bus, slaveid: number, spec: Ispecification, entityId: number): Promise<ImodbusEntity>;
    private static populateEntitiesForSpecification;
    static getModbusSpecificationFromData(task: string, bus: Bus, slaveid: number, specification: IfileSpecification, sub: Subject<ImodbusSpecification>): void;
    static getModbusSpecification(task: string, bus: Bus, slaveid: number, specificationFilename: string | undefined, failedFunction: (e: any) => void): Observable<ImodbusSpecification>;
}
export declare class ModbusForTest extends Modbus {
    modbusDataToSpecForTest(spec: IfileSpecification): ImodbusSpecification | undefined;
}
