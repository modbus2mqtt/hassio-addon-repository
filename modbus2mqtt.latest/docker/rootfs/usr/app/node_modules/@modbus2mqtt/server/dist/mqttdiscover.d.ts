import { ImodbusSpecification, EnumStateClasses } from '@modbus2mqtt/specification.shared';
import { ImqttClient, Islave, Slave } from '@modbus2mqtt/server.shared';
import { Mutex } from 'async-mutex';
import { Observable } from 'rxjs';
export interface ItopicAndPayloads {
    topic: string;
    payload: string | Buffer;
    entityid: number;
}
export interface ImqttDevice extends Islave {
    busid: number;
}
export declare class MqttDiscover {
    private client?;
    private subscribedSlaves;
    private isSubscribed;
    private static lastMessage;
    private interval;
    private isPolling;
    private pollMutex;
    validate(_discover: any): void;
    private pollCounts;
    private triggers;
    private onDestroy;
    private static instance;
    static getInstance(): MqttDiscover;
    static addSpecificationToSlave(slave: Slave): Slave;
    constructor();
    getSlaveBaseTopics(): string[];
    getSlave(topic: string): Slave | undefined;
    private generateEntityConfigurationTopic;
    private generateDiscoveryPayloads;
    static getStateClass(state_class: EnumStateClasses): string;
    private getSubscribedSlaveFromDiscoveryTopic;
    private static getBusAndSlaveFromTopic;
    private onMqttCommandMessage;
    private sendCommandModbus;
    private onMqttMessage;
    sendEntityCommandWithPublish(slave: Slave, topic: string, payload: string): Promise<ImodbusSpecification>;
    private sendEntityCommand;
    sendCommand(slave: Slave, payload: string): Promise<ImodbusSpecification>;
    private containsTopic;
    private generateDiscoveryEntities;
    private error;
    private onConnectCallbacks;
    private executeActions;
    private handleErrors;
    private onConnect;
    private connectMqtt;
    validateConnection(connectionData: ImqttClient | undefined, callback: (valid: boolean, message: string) => void): void;
    private equalConnectionData;
    mqttClientMutex: Mutex;
    private getMqttClient;
    private resubscribe;
    private publish;
    private unsubscribe;
    private onUpdateSlave;
    onDeleteBus(busid: number): Promise<void>;
    private readModbusAndPublishState;
    static readModbus(slave: Slave): Observable<ImodbusSpecification> | undefined;
    private generateQos;
    private publishState;
    private poll;
    onDeleteSlave(slave: Slave): Promise<void>;
    startPolling(): void;
}
