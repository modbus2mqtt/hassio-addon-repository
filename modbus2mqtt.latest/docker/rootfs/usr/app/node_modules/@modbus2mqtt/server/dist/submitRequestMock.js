"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReadRegisterResult = getReadRegisterResult;
exports.submitGetHoldingRegisterRequest = submitGetHoldingRegisterRequest;
const specification_shared_1 = require("@modbus2mqtt/specification.shared");
const specification_1 = require("@modbus2mqtt/specification");
function getReadRegisterResult(n) {
    let one = {
        result: {
            data: [n],
            buffer: Buffer.allocUnsafe(2),
        },
    };
    one.result.buffer.writeInt16BE(n);
    return one;
}
function submitGetHoldingRegisterRequest(_slaveid, addresses) {
    return new Promise((resolve, reject) => {
        let rc = (0, specification_1.emptyModbusValues)();
        if (_slaveid.slaveid > 10) {
            reject(new Error('terminate more slaveid '));
            return;
        }
        addresses.forEach((addr) => {
            let a = addr.address;
            let m = rc.holdingRegisters;
            switch (addr.registerType) {
                case specification_shared_1.ModbusRegisterType.AnalogInputs:
                    m = rc.analogInputs;
                    break;
                case specification_shared_1.ModbusRegisterType.Coils:
                    m = rc.coils;
                    break;
                case specification_shared_1.ModbusRegisterType.DiscreteInputs:
                    m = rc.discreteInputs;
                    break;
            }
            if (_slaveid.slaveid == 1)
                switch (a) {
                    case 0:
                        m.set(addr.address, getReadRegisterResult(1));
                        break;
                    case 1:
                        m.set(addr.address, getReadRegisterResult(1));
                        break;
                    case 2:
                        m.set(addr.address, getReadRegisterResult(1));
                        break;
                    case 3:
                        m.set(addr.address, getReadRegisterResult(1));
                        break;
                    case 4:
                        m.set(addr.address, getReadRegisterResult(210));
                        break;
                    default:
                        m.set(addr.address, { error: new Error('failed!!!') });
                }
            else
                switch (a) {
                    case 3:
                        m.set(addr.address, getReadRegisterResult(2));
                        break;
                    case 5:
                        m.set(addr.address, getReadRegisterResult((65 << 8) | 66));
                        break;
                    case 6:
                        m.set(addr.address, getReadRegisterResult((67 << 8) | 68));
                        break;
                    case 7:
                    case 8:
                    case 9:
                        m.set(addr.address, getReadRegisterResult(0));
                        break;
                    default:
                        m.set(addr.address, getReadRegisterResult(3));
                }
        });
        resolve(rc);
    });
}
//# sourceMappingURL=submitRequestMock.js.map