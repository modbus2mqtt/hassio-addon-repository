export declare enum HttpErrorsEnum {
    OK = 200,
    OkCreated = 201,
    OkAccepted = 202,
    OkNonAuthoritativeInformation = 203,
    OkNoContent = 204,
    ErrBadRequest = 400,
    ErrUnauthorized = 401,
    ErrForbidden = 403,
    ErrNotFound = 404,
    ErrNotAcceptable = 406,
    ErrRequestTimeout = 408,
    ErrInvalidParameter = 422,
    SrvErrInternalServerError = 500
}
export declare const BUS_TIMEOUT_DEFAULT = 500;
export declare enum ModbusRegisterType {
    IllegalFunctionCode = 0,
    Coils = 1,
    DiscreteInputs = 2,
    HoldingRegister = 3,
    AnalogInputs = 4
}
export declare enum EnumNumberFormat {
    default = 0,
    float32 = 1,
    signedInt16 = 2,
    signedInt32 = 3,
    unsignedInt32 = 4
}
export declare enum EnumStateClasses {
    none = 0,
    measurement = 1,
    total = 2,
    total_increasing = 3
}
export interface IimportMessages {
    warnings: string;
    errors: string;
}
export interface IselectOption extends Iname {
    key: number;
}
export interface Iselect extends Islave_class {
    optionModbusValues?: number[];
    options?: IselectOption[];
    identification?: RegExp;
}
export interface Islave_class {
    device_class?: string;
}
export interface Inumber extends Islave_class {
    multiplier?: number;
    offset?: number;
    numberFormat?: EnumNumberFormat;
    decimals?: number;
    state_class?: EnumStateClasses;
    uom?: string;
    step?: number;
    identification?: IminMax;
}
export interface Itext {
    stringlength: number;
    identification?: string;
}
export interface Ivalue {
    value: string;
}
export interface IFunctionCode {
    registerType: ModbusRegisterType;
    name: string;
}
export interface Iconverter {
    name: Converters;
    registerTypes: ModbusRegisterType[];
}
export interface Icvtparameter {
    reqPara: string[];
    optPara: string[];
    needsOptions: boolean;
}
export declare function jsonConverter<K, V>(body: Object, cnv: (a: string) => K): Map<K, V>;
export declare enum IdentifiedStates {
    notIdentified = 0,
    identified = 1,
    unknown = -1
}
export declare enum SpecialEntityIds {
    deviceIdentities = -1000
}
export declare enum VariableTargetParameters {
    deviceIdentifiers = 1,
    deviceSerialNumber = 5,
    deviceSWversion = 6,
    entityUom = 2,
    entityMultiplier = 3,
    entityOffset = 4,
    noParam = 0
}
export type Converters = 'number' | 'select' | 'text' | 'binary' | 'value';
export type ConverterParameter = Inumber | Iselect | Itext | Ivalue;
export interface Iname {
    name: string;
}
export interface Iid {
    id: number;
}
export interface IminMax {
    min: number;
    max: number;
}
export interface Ientity extends Iid {
    mqttname?: string;
    converter: Iconverter;
    readonly: boolean;
    variableConfiguration?: {
        targetParameter: VariableTargetParameters;
        entityId?: number;
    };
    value_template?: string;
    registerType: ModbusRegisterType;
    modbusAddress: number;
    icon?: string;
    forceUpdate?: boolean;
    entityCategory?: string;
    converterParameters?: ConverterParameter;
}
export declare function getParameterType(converter: Iconverter | null | undefined): string | undefined;
export declare function cleanConverterParameters(entity: Ientity): void;
export declare function removeModbusData(entity: Ientity): void;
export interface ImodbusEntityAndMessages {
    ent: ImodbusEntity | undefined;
    messages: string[];
}
export interface ImodbusData {
    id: number;
    modbusValue: number[];
    mqttValue: string | number;
    identified: IdentifiedStates;
    modbusError?: string;
}
export interface ImodbusEntity extends ImodbusData, Ientity {
}
export declare function instanceOfIentity(object: any): object is Ientity;
export declare function instanceOfIModbusEntity(object: any): object is ImodbusEntity;
declare global {
    interface Array<T> {
        errormessage: string;
    }
}
export declare const SPECIFICATION_VERSION = "0.3";
export declare const SPECIFICATION_FILES_VERSION = "0.1";
export declare const enum SpecificationStatus {
    published = 0,
    cloned = 1,
    added = 2,
    new = 3,
    contributed = 4
}
export declare const enum SpecificationFileUsage {
    img = "img",
    documentation = "doc",
    icon = "icon",
    unknown = ""
}
export interface Iidentification {
    entity: string;
    min?: number;
    max?: number;
    regex?: string;
    isValid?: boolean;
}
export declare enum FileLocation {
    Local = 0,
    Global = 1
}
export interface IimageAndDocumentUrl {
    url: string;
    fileLocation: FileLocation;
    usage: SpecificationFileUsage;
}
export interface ISpecificationText {
    textId: string;
    text: string;
}
export interface ISpecificationTexts {
    lang: string;
    texts: ISpecificationText[];
}
export interface IUpdatei18nText {
    key: string;
    i18n: ISpecificationTexts[];
}
export interface IbaseSpecification {
    filename: string;
    model?: string;
    manufacturer?: string;
    files: IimageAndDocumentUrl[];
    status: SpecificationStatus;
    identification?: Iidentification[];
    i18n: ISpecificationTexts[];
    nextEntityId?: number;
}
export interface ImodbusSpecification extends IbaseSpecification {
    identified: IdentifiedStates;
    entities: ImodbusEntity[];
    pullUrl?: string;
}
export interface Ispecification extends IbaseSpecification {
    entities: Ientity[];
}
export interface ImodbusSpecificationAndMessages {
    spec: ImodbusSpecification | undefined;
    messages: string[];
}
export declare function getSpecificationI18nText(spec: IbaseSpecification, language: string, textId: string, noFallbackLanguage?: boolean): string | null;
export declare function setSpecificationI18nText(spec: IbaseSpecification, language: string, textId: string, text: string | null | undefined): void;
export declare function deleteSpecificationI18nText(spec: IbaseSpecification, textId: string): void;
export declare function getSpecificationI18nName(spec: IbaseSpecification, language: string, noFallbackLanguage?: boolean): string | null;
export declare function getSpecificationI18nEntityName(spec: IbaseSpecification, language: string, entityId: number, noFallbackLanguage?: boolean): string | null;
export declare function getSpecificationI18nEntityOptionName(spec: IbaseSpecification, language: string, entityId: number, modbusValue: number, noFallbackLanguage?: boolean): string | null;
export declare function setSpecificationI18nName(spec: IbaseSpecification, language: string, text: string | null | undefined): void;
export declare function setSpecificationI18nEntityName(spec: IbaseSpecification, language: string, entityId: number, text: string | null | undefined): void;
export declare function setSpecificationI18nEntityOptionName(spec: IbaseSpecification, language: string, entityId: number, modbusValue: number, text: string | null | undefined): void;
export declare function deleteSpecificationI18nEntityOptionName(spec: IbaseSpecification, entityId: number, modbusValue: number): void;
export declare function deleteSpecificationI18nEntityNameAndOptions(spec: IbaseSpecification, entityId: number): void;
export declare function getSpecificationI18nEntityOptionId(spec: IbaseSpecification, language: string, entityId: number, mqttValue: string, noFallbackLanguage?: boolean): number[];
export declare function getCurrentLanguage(_ins: string): string;
export declare function getFileNameFromName(name: string): string | undefined;
export declare const newSpecfilename: string;
export declare const newSpecification: ImodbusSpecification;
