"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.newSpecification = exports.newSpecfilename = exports.FileLocation = exports.SPECIFICATION_FILES_VERSION = exports.SPECIFICATION_VERSION = exports.VariableTargetParameters = exports.SpecialEntityIds = exports.IdentifiedStates = exports.EnumStateClasses = exports.EnumNumberFormat = exports.ModbusRegisterType = exports.BUS_TIMEOUT_DEFAULT = exports.HttpErrorsEnum = void 0;
exports.jsonConverter = jsonConverter;
exports.getParameterType = getParameterType;
exports.cleanConverterParameters = cleanConverterParameters;
exports.removeModbusData = removeModbusData;
exports.instanceOfIentity = instanceOfIentity;
exports.instanceOfIModbusEntity = instanceOfIModbusEntity;
exports.getSpecificationI18nText = getSpecificationI18nText;
exports.setSpecificationI18nText = setSpecificationI18nText;
exports.deleteSpecificationI18nText = deleteSpecificationI18nText;
exports.getSpecificationI18nName = getSpecificationI18nName;
exports.getSpecificationI18nEntityName = getSpecificationI18nEntityName;
exports.getSpecificationI18nEntityOptionName = getSpecificationI18nEntityOptionName;
exports.setSpecificationI18nName = setSpecificationI18nName;
exports.setSpecificationI18nEntityName = setSpecificationI18nEntityName;
exports.setSpecificationI18nEntityOptionName = setSpecificationI18nEntityOptionName;
exports.deleteSpecificationI18nEntityOptionName = deleteSpecificationI18nEntityOptionName;
exports.deleteSpecificationI18nEntityNameAndOptions = deleteSpecificationI18nEntityNameAndOptions;
exports.getSpecificationI18nEntityOptionId = getSpecificationI18nEntityOptionId;
exports.getCurrentLanguage = getCurrentLanguage;
exports.getFileNameFromName = getFileNameFromName;
var HttpErrorsEnum;
(function (HttpErrorsEnum) {
    HttpErrorsEnum[HttpErrorsEnum["OK"] = 200] = "OK";
    HttpErrorsEnum[HttpErrorsEnum["OkCreated"] = 201] = "OkCreated";
    HttpErrorsEnum[HttpErrorsEnum["OkAccepted"] = 202] = "OkAccepted";
    HttpErrorsEnum[HttpErrorsEnum["OkNonAuthoritativeInformation"] = 203] = "OkNonAuthoritativeInformation";
    HttpErrorsEnum[HttpErrorsEnum["OkNoContent"] = 204] = "OkNoContent";
    HttpErrorsEnum[HttpErrorsEnum["ErrBadRequest"] = 400] = "ErrBadRequest";
    HttpErrorsEnum[HttpErrorsEnum["ErrUnauthorized"] = 401] = "ErrUnauthorized";
    HttpErrorsEnum[HttpErrorsEnum["ErrForbidden"] = 403] = "ErrForbidden";
    HttpErrorsEnum[HttpErrorsEnum["ErrNotFound"] = 404] = "ErrNotFound";
    HttpErrorsEnum[HttpErrorsEnum["ErrNotAcceptable"] = 406] = "ErrNotAcceptable";
    HttpErrorsEnum[HttpErrorsEnum["ErrRequestTimeout"] = 408] = "ErrRequestTimeout";
    HttpErrorsEnum[HttpErrorsEnum["ErrInvalidParameter"] = 422] = "ErrInvalidParameter";
    HttpErrorsEnum[HttpErrorsEnum["SrvErrInternalServerError"] = 500] = "SrvErrInternalServerError";
})(HttpErrorsEnum || (exports.HttpErrorsEnum = HttpErrorsEnum = {}));
exports.BUS_TIMEOUT_DEFAULT = 500;
var ModbusRegisterType;
(function (ModbusRegisterType) {
    ModbusRegisterType[ModbusRegisterType["IllegalFunctionCode"] = 0] = "IllegalFunctionCode";
    ModbusRegisterType[ModbusRegisterType["Coils"] = 1] = "Coils";
    ModbusRegisterType[ModbusRegisterType["DiscreteInputs"] = 2] = "DiscreteInputs";
    ModbusRegisterType[ModbusRegisterType["HoldingRegister"] = 3] = "HoldingRegister";
    ModbusRegisterType[ModbusRegisterType["AnalogInputs"] = 4] = "AnalogInputs";
})(ModbusRegisterType || (exports.ModbusRegisterType = ModbusRegisterType = {}));
var EnumNumberFormat;
(function (EnumNumberFormat) {
    EnumNumberFormat[EnumNumberFormat["default"] = 0] = "default";
    EnumNumberFormat[EnumNumberFormat["float32"] = 1] = "float32";
    EnumNumberFormat[EnumNumberFormat["signedInt16"] = 2] = "signedInt16";
    EnumNumberFormat[EnumNumberFormat["signedInt32"] = 3] = "signedInt32";
    EnumNumberFormat[EnumNumberFormat["unsignedInt32"] = 4] = "unsignedInt32";
})(EnumNumberFormat || (exports.EnumNumberFormat = EnumNumberFormat = {}));
var EnumStateClasses;
(function (EnumStateClasses) {
    EnumStateClasses[EnumStateClasses["none"] = 0] = "none";
    EnumStateClasses[EnumStateClasses["measurement"] = 1] = "measurement";
    EnumStateClasses[EnumStateClasses["total"] = 2] = "total";
    EnumStateClasses[EnumStateClasses["total_increasing"] = 3] = "total_increasing";
})(EnumStateClasses || (exports.EnumStateClasses = EnumStateClasses = {}));
function jsonConverter(body, cnv) {
    var m = new Map();
    for (var prop in body) {
        if (Object.prototype.hasOwnProperty.call(body, prop)) {
            m.set(cnv(prop), body[prop]);
        }
    }
    return m;
}
var IdentifiedStates;
(function (IdentifiedStates) {
    IdentifiedStates[IdentifiedStates["notIdentified"] = 0] = "notIdentified";
    IdentifiedStates[IdentifiedStates["identified"] = 1] = "identified";
    IdentifiedStates[IdentifiedStates["unknown"] = -1] = "unknown";
})(IdentifiedStates || (exports.IdentifiedStates = IdentifiedStates = {}));
var SpecialEntityIds;
(function (SpecialEntityIds) {
    SpecialEntityIds[SpecialEntityIds["deviceIdentities"] = -1000] = "deviceIdentities";
})(SpecialEntityIds || (exports.SpecialEntityIds = SpecialEntityIds = {}));
var VariableTargetParameters;
(function (VariableTargetParameters) {
    VariableTargetParameters[VariableTargetParameters["deviceIdentifiers"] = 1] = "deviceIdentifiers";
    VariableTargetParameters[VariableTargetParameters["deviceSerialNumber"] = 5] = "deviceSerialNumber";
    VariableTargetParameters[VariableTargetParameters["deviceSWversion"] = 6] = "deviceSWversion";
    VariableTargetParameters[VariableTargetParameters["entityUom"] = 2] = "entityUom";
    VariableTargetParameters[VariableTargetParameters["entityMultiplier"] = 3] = "entityMultiplier";
    VariableTargetParameters[VariableTargetParameters["entityOffset"] = 4] = "entityOffset";
    VariableTargetParameters[VariableTargetParameters["noParam"] = 0] = "noParam";
})(VariableTargetParameters || (exports.VariableTargetParameters = VariableTargetParameters = {}));
function getParameterType(converter) {
    if (converter)
        switch (converter.name) {
            case 'text':
                return 'Itext';
            case 'number':
                return 'Inumber';
            case 'select':
                return 'Iselect';
            case 'value':
                return 'Ivalue';
            case 'binary':
                return '';
            default:
        }
    return undefined;
}
function cleanConverterParameters(entity) {
    var o = entity.converterParameters;
    var validKeys = undefined;
    switch (getParameterType(entity.converter)) {
        case 'Inumber':
            validKeys = ['multiplier', 'offset', 'uom', 'device_class', 'identification'];
            break;
        case 'Itext':
            validKeys = ['stringlength', 'identification'];
            break;
        case 'Ivalue':
            validKeys = ['value'];
            break;
        case 'Iselect':
            validKeys = ['options'];
            break;
    }
    if (!validKeys)
        return;
    var availableKeys = Object(o);
    var _loop_1 = function (k) {
        if (validKeys.findIndex(function (vk) {
            return k === vk;
        }) < 0)
            delete o[k];
    };
    for (var k in availableKeys) {
        _loop_1(k);
    }
}
function removeModbusData(entity) {
    var o = entity;
    delete o.modbusValue;
    delete o.mqttValue;
    delete o.identified;
}
function instanceOfIentity(object) {
    return 'name' in object && 'converter' in object && 'converterParameters' in object && 'converterOptions' in object;
}
function instanceOfIModbusEntity(object) {
    return instanceOfIentity(object) && 'modbusValue' in object && 'mqttValue' in object;
}
exports.SPECIFICATION_VERSION = '0.3';
exports.SPECIFICATION_FILES_VERSION = '0.1';
var FileLocation;
(function (FileLocation) {
    FileLocation[FileLocation["Local"] = 0] = "Local";
    FileLocation[FileLocation["Global"] = 1] = "Global";
})(FileLocation || (exports.FileLocation = FileLocation = {}));
;
[];
function getSpecificationI18nText(spec, language, textId, noFallbackLanguage) {
    if (noFallbackLanguage === void 0) { noFallbackLanguage = false; }
    if (!spec || !spec.i18n)
        return null;
    var texts = spec.i18n.find(function (i18) { return i18.lang === language; });
    var enTexts = spec.i18n.find(function (i18) { return i18.lang === 'en'; });
    if (texts) {
        var text = texts.texts.find(function (tx) { return tx.textId === textId; });
        if (text)
            return text.text;
    }
    if (enTexts && !noFallbackLanguage) {
        var text = enTexts.texts.find(function (tx) { return tx.textId === textId; });
        if (text)
            return text.text;
    }
    return null;
}
function setSpecificationI18nText(spec, language, textId, text) {
    if (!spec || !spec.i18n)
        return;
    var texts = spec.i18n.find(function (i18) { return i18.lang === language; });
    if (!texts) {
        if (text)
            spec.i18n.push({ lang: language, texts: [] });
        else
            return;
        texts = spec.i18n[spec.i18n.length - 1];
    }
    var textIndex = texts.texts.findIndex(function (tx) { return tx.textId === textId; });
    if (textIndex >= 0) {
        if (text)
            texts.texts[textIndex].text = text;
        else
            texts.texts.splice(textIndex, 1);
    }
    else if (text)
        texts.texts.push({ textId: textId, text: text });
}
function deleteSpecificationI18nText(spec, textId) {
    if (!spec || !spec.i18n)
        return;
    spec.i18n.forEach(function (texts) {
        if (texts) {
            var textIndex = texts.texts.findIndex(function (tx) { return tx.textId === textId; });
            if (textIndex >= 0)
                texts.texts.splice(textIndex, 1);
        }
    });
}
function getSpecificationI18nName(spec, language, noFallbackLanguage) {
    if (noFallbackLanguage === void 0) { noFallbackLanguage = false; }
    return getSpecificationI18nText(spec, language, 'name', noFallbackLanguage);
}
function getSpecificationI18nEntityName(spec, language, entityId, noFallbackLanguage) {
    if (noFallbackLanguage === void 0) { noFallbackLanguage = false; }
    return getSpecificationI18nText(spec, language, 'e' + entityId, noFallbackLanguage);
}
function getSpecificationI18nEntityOptionName(spec, language, entityId, modbusValue, noFallbackLanguage) {
    if (noFallbackLanguage === void 0) { noFallbackLanguage = false; }
    return getSpecificationI18nText(spec, language, 'e' + entityId + 'o.' + modbusValue, noFallbackLanguage);
}
function setSpecificationI18nName(spec, language, text) {
    setSpecificationI18nText(spec, language, 'name', text);
}
function setSpecificationI18nEntityName(spec, language, entityId, text) {
    setSpecificationI18nText(spec, language, 'e' + entityId, text);
}
function setSpecificationI18nEntityOptionName(spec, language, entityId, modbusValue, text) {
    setSpecificationI18nText(spec, language, 'e' + entityId + 'o.' + modbusValue, text);
}
function deleteSpecificationI18nEntityOptionName(spec, entityId, modbusValue) {
    deleteSpecificationI18nText(spec, 'e' + entityId + 'o.' + modbusValue);
}
function deleteSpecificationI18nEntityNameAndOptions(spec, entityId) {
    spec.i18n.forEach(function (i18n) {
        var textIndex;
        while (-1 != (textIndex = i18n.texts.findIndex(function (tx) { return tx.textId.startsWith('e' + entityId); })))
            if (textIndex >= 0)
                i18n.texts.splice(textIndex, 1);
    });
}
function getSpecificationI18nEntityOptionId(spec, language, entityId, mqttValue, noFallbackLanguage) {
    var _a, _b;
    if (noFallbackLanguage === void 0) { noFallbackLanguage = false; }
    if (!spec || !spec.i18n)
        return [0];
    var texts = spec.i18n.find(function (i18) { return i18.lang === language; });
    var key = 'e' + entityId + 'o.';
    var enTexts = spec.i18n.find(function (i18) { return i18.lang === 'en'; });
    if (texts) {
        var text = (_a = texts.texts.find(function (tx) { return tx.text === mqttValue && tx.textId.startsWith(key); })) === null || _a === void 0 ? void 0 : _a.textId;
        if (text) {
            return [parseInt(text.substring(key.length))];
        }
    }
    if (enTexts && !noFallbackLanguage) {
        var text = (_b = enTexts.texts.find(function (tx) { return tx.text === mqttValue && tx.textId.startsWith(key); })) === null || _b === void 0 ? void 0 : _b.textId;
        if (text)
            return [parseInt(text.substring(key.length))];
    }
    return [0];
}
function getCurrentLanguage(_ins) {
    return navigator.language.replace(/\-.*/g, '');
}
function getFileNameFromName(name) {
    var searchRegExp = /[^a-z^A-Z^\.^0-9+-._]*/g;
    if (!name)
        return undefined;
    var n = name.toLowerCase();
    return n.replace(searchRegExp, '');
}
exports.newSpecfilename = '_new';
exports.newSpecification = {
    identified: IdentifiedStates.unknown,
    entities: [],
    i18n: [],
    files: [],
    filename: exports.newSpecfilename,
    status: 3 /* SpecificationStatus.new */,
};
//# sourceMappingURL=types.js.map