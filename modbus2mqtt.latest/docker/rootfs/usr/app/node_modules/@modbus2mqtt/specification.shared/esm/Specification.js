import { VariableTargetParameters } from './types';
export var MessageTypes;
(function (MessageTypes) {
    MessageTypes[MessageTypes["nameTextMissing"] = 0] = "nameTextMissing";
    MessageTypes[MessageTypes["entityTextMissing"] = 1] = "entityTextMissing";
    MessageTypes[MessageTypes["translationMissing"] = 2] = "translationMissing";
    MessageTypes[MessageTypes["noEntity"] = 3] = "noEntity";
    MessageTypes[MessageTypes["noDocumentation"] = 4] = "noDocumentation";
    MessageTypes[MessageTypes["noImage"] = 5] = "noImage";
    MessageTypes[MessageTypes["identifiedByOthers"] = 27] = "identifiedByOthers";
    MessageTypes[MessageTypes["nonUniqueName"] = 28] = "nonUniqueName";
    MessageTypes[MessageTypes["notIdentified"] = 29] = "notIdentified";
    MessageTypes[MessageTypes["warningWithNoNote"] = 30] = "warningWithNoNote";
    //compare
    MessageTypes[MessageTypes["differentFilename"] = 6] = "differentFilename";
    MessageTypes[MessageTypes["missingEntity"] = 7] = "missingEntity";
    MessageTypes[MessageTypes["differentConverter"] = 8] = "differentConverter";
    MessageTypes[MessageTypes["addedEntity"] = 9] = "addedEntity";
    MessageTypes[MessageTypes["differentModbusAddress"] = 10] = "differentModbusAddress";
    MessageTypes[MessageTypes["differentFunctionCode"] = 11] = "differentFunctionCode";
    MessageTypes[MessageTypes["differentIcon"] = 12] = "differentIcon";
    MessageTypes[MessageTypes["differentTargetParameter"] = 13] = "differentTargetParameter";
    MessageTypes[MessageTypes["differentVariableEntityId"] = 14] = "differentVariableEntityId";
    MessageTypes[MessageTypes["differentVariableConfiguration"] = 15] = "differentVariableConfiguration";
    MessageTypes[MessageTypes["differentDeviceClass"] = 16] = "differentDeviceClass";
    MessageTypes[MessageTypes["differentIdentificationMax"] = 17] = "differentIdentificationMax";
    MessageTypes[MessageTypes["differentIdentificationMin"] = 18] = "differentIdentificationMin";
    MessageTypes[MessageTypes["differentIdentification"] = 19] = "differentIdentification";
    MessageTypes[MessageTypes["differentMultiplier"] = 20] = "differentMultiplier";
    MessageTypes[MessageTypes["differentOffset"] = 21] = "differentOffset";
    MessageTypes[MessageTypes["differentOptionTable"] = 22] = "differentOptionTable";
    MessageTypes[MessageTypes["differentStringlength"] = 23] = "differentStringlength";
    MessageTypes[MessageTypes["differentManufacturer"] = 24] = "differentManufacturer";
    MessageTypes[MessageTypes["differentModel"] = 25] = "differentModel";
    MessageTypes[MessageTypes["differentTranslation"] = 26] = "differentTranslation";
    MessageTypes[MessageTypes["noMqttDiscoveryLanguage"] = 31] = "noMqttDiscoveryLanguage";
})(MessageTypes || (MessageTypes = {}));
export var MessageCategories;
(function (MessageCategories) {
    MessageCategories[MessageCategories["validateFilename"] = 0] = "validateFilename";
    MessageCategories[MessageCategories["validateEntity"] = 1] = "validateEntity";
    MessageCategories[MessageCategories["validateTranslation"] = 2] = "validateTranslation";
    MessageCategories[MessageCategories["validateFiles"] = 3] = "validateFiles";
    MessageCategories[MessageCategories["compare"] = 4] = "compare";
    MessageCategories[MessageCategories["compareEntity"] = 5] = "compareEntity";
    MessageCategories[MessageCategories["validateOtherIdentification"] = 6] = "validateOtherIdentification";
    MessageCategories[MessageCategories["validateSpecification"] = 7] = "validateSpecification";
    MessageCategories[MessageCategories["configuration"] = 8] = "configuration";
})(MessageCategories || (MessageCategories = {}));
export var editableConverters = ['binary_sensor', 'number', 'text', 'select', 'button'];
export function validateTranslation(spec, language, msgs) {
    var en = spec.i18n.find(function (l) { return l.lang === language; });
    var category = MessageCategories.validateTranslation;
    if (spec.entities.length > 0) {
        if (!en)
            msgs.push({
                type: MessageTypes.translationMissing,
                category: category,
                additionalInformation: language,
            });
        else {
            spec.entities.forEach(function (ent) {
                if (!ent.variableConfiguration) {
                    var translation = en.texts.find(function (tx) { return tx.textId == 'e' + ent.id; });
                    if (!translation)
                        msgs.push({
                            type: MessageTypes.entityTextMissing,
                            category: category,
                            referencedEntity: ent.id,
                            additionalInformation: language,
                        });
                }
            });
            var nameTranslation = en === null || en === void 0 ? void 0 : en.texts.find(function (tx) { return tx.textId == 'name'; });
            if (!nameTranslation)
                msgs.push({ type: MessageTypes.nameTextMissing, category: category });
        }
    }
}
export function getBaseFilename(filename) {
    var idx = filename.lastIndexOf('/');
    if (idx >= 0)
        return filename.substring(idx + 1);
    return filename;
}
export function getUom(spec, entityId) {
    var ent = spec.entities.find(function (e) { return e.id == entityId; });
    var entUom = spec.entities.find(function (e) {
        return e.variableConfiguration &&
            e.variableConfiguration.targetParameter == VariableTargetParameters.entityUom &&
            e.variableConfiguration.entityId == entityId;
    });
    return entUom && entUom.mqttValue ? entUom.mqttValue : '';
}
//# sourceMappingURL=Specification.js.map