"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryConverter = void 0;
const converter_1 = require("./converter");
const specification_shared_1 = require("@modbus2mqtt/specification.shared");
class BinaryConverter extends converter_1.Converter {
    constructor(component) {
        if (!component)
            component = 'number';
        super(component);
    }
    modbus2mqtt(_spec, _entityid, value) {
        return value.data[0] ? 'ON' : 'OFF';
    }
    mqtt2modbus(_spec, _entityid, value) {
        return value == 'ON' ? { data: [1], buffer: Buffer.from([1]) } : { data: [0], buffer: Buffer.from([0]) };
    }
    getParameterType(_entity) {
        return 'Ibinary';
    }
    getModbusRegisterTypes() {
        return [specification_shared_1.ModbusRegisterType.Coils, specification_shared_1.ModbusRegisterType.DiscreteInputs, specification_shared_1.ModbusRegisterType.HoldingRegister];
    }
}
exports.BinaryConverter = BinaryConverter;
//# sourceMappingURL=binaryConverter.js.map