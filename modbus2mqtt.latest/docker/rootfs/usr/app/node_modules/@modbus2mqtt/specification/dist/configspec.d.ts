import { IimageAndDocumentUrl, IimportMessages, ImodbusSpecification, SpecificationFileUsage, SpecificationStatus } from '@modbus2mqtt/specification.shared';
import { IfileSpecification } from './ifilespecification';
import stream from 'stream';
import { Mutex } from 'async-mutex';
export declare const filesUrlPrefix = "specifications/files";
export declare class ConfigSpecification {
    static setMqttdiscoverylanguage(lang: string, ghToken?: string): void;
    static filesMutex: Mutex;
    static mqttdiscoverylanguage: string | undefined;
    static githubPersonalToken: string | undefined;
    static getPublicDir(): string;
    static getLocalDir(): string;
    constructor();
    private static getPublicSpecificationPath;
    private static getContributedSpecificationPath;
    private static getSpecificationPath;
    private static getLocalFilesPath;
    private static getPublicFilesPath;
    private static getContributedFilesPath;
    appendSpecificationUrls(specfilename: string, urls: IimageAndDocumentUrl[]): Promise<IimageAndDocumentUrl[] | undefined>;
    appendSpecificationFiles(specfilename: string, filenames: string[], usage: SpecificationFileUsage): Promise<IimageAndDocumentUrl[] | undefined>;
    private static specifications;
    static yamlDir: string;
    private readFilesYaml;
    private readspecifications;
    readYaml(): void;
    filterAllSpecifications(specFunction: (spec: IfileSpecification) => void): void;
    static emptyTestData: {
        holdingRegisters: never[];
        coils: never[];
        analogInputs: never[];
        discreteInputs: never[];
    };
    static toFileSpecification(modbusSpec: ImodbusSpecification): IfileSpecification;
    static deleteSpecificationFile(specfilename: string, url: string, usage: SpecificationFileUsage): IimageAndDocumentUrl[];
    private renameFilesPath;
    private cleanSpecForWriting;
    changeContributionStatus(filename: string, newStatus: SpecificationStatus, pullNumber?: number): void;
    writeSpecificationFromFileSpec(spec: IfileSpecification, originalFilename: string | null, pullNumber?: number): IfileSpecification;
    writeSpecification(spec: ImodbusSpecification, onAfterSave: (filename: string) => void | undefined, originalFilename: string | null): IfileSpecification;
    deleteNewSpecificationFiles(): void;
    deleteSpecification(specfileName: string): void;
    static getSpecificationByName(name: string): IfileSpecification | undefined;
    static clearModbusData(spec: IfileSpecification): void;
    static getSpecificationByFilename(filename: string): IfileSpecification | undefined;
    static getFileNameFromSlaveId(slaveid: number): string;
    static createZipFromSpecification(specfilename: string, r: stream.Writable): void;
    private static validateSpecificationZip;
    static importSpecificationZip(zipfilename: string): IimportMessages;
}
export declare function getSpecificationImageOrDocumentUrl(rootUrl: string | undefined, specName: string, url: string): string;
