"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConverterMap = void 0;
const numberConverter_1 = require("./numberConverter");
const textConverter_1 = require("./textConverter");
const selectConverter_1 = require("./selectConverter");
const valueconverter_1 = require("./valueconverter");
const binaryConverter_1 = require("./binaryConverter");
class ConverterMap extends Map {
    static { this.converterMap = new ConverterMap(); }
    static getConverterMap() {
        return ConverterMap.converterMap;
    }
    static getConverters() {
        let rc = [];
        ConverterMap.getConverterMap().forEach((con, name) => {
            let c = {
                name: name,
                registerTypes: con.getModbusRegisterTypes(),
            };
            rc.push(c);
        });
        return rc;
    }
    static getIConverter(entity) {
        let cv = undefined;
        if (entity.converter)
            cv = this.getConverterMap().get(entity.converter.name);
        if (cv) {
            let c = {
                name: entity.converter.name,
                registerTypes: cv.getModbusRegisterTypes(),
            };
            return c;
        }
        return undefined;
    }
    // static getConverters(): Iconverter[] {
    //     let rc:Iconverter[] =[]
    //     ConverterMap.getConverterMap().forEach((con, name)=>{
    //         let c:Iconverter={
    //             name: name,
    //             functionCodes:con.getModbusFunctionCodes()
    //         }
    //         rc.push(c)
    //     })
    //     return rc;
    // }
    static getConverter(entity) {
        let cv = undefined;
        if (entity.converter)
            cv = this.getConverterMap().get(entity.converter.name);
        return cv;
    }
    //@ts-ignore
    static { this._initialize = (() => {
        if (ConverterMap.converterMap.size == 0) {
            // read/write not a sensor
            ConverterMap.converterMap.set('number', new numberConverter_1.NumberConverter());
            ConverterMap.converterMap.set('select', new selectConverter_1.SelectConverter());
            ConverterMap.converterMap.set('text', new textConverter_1.TextConverter());
            ConverterMap.converterMap.set('binary', new binaryConverter_1.BinaryConverter());
            ConverterMap.converterMap.set('value', new valueconverter_1.ValueConverter());
        }
    })(); }
}
exports.ConverterMap = ConverterMap;
//# sourceMappingURL=convertermap.js.map