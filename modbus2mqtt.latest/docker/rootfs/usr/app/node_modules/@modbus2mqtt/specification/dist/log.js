"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevelEnum = void 0;
const tslib_1 = require("tslib");
const npmlog_1 = tslib_1.__importDefault(require("npmlog"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const util_1 = require("util");
var LogLevelEnum;
(function (LogLevelEnum) {
    LogLevelEnum["verbose"] = "verbose";
    LogLevelEnum["timing"] = "timing";
    LogLevelEnum["http"] = "http";
    LogLevelEnum["notice"] = "notice";
    LogLevelEnum["warn"] = "warn";
    LogLevelEnum["error"] = "error";
})(LogLevelEnum || (exports.LogLevelEnum = LogLevelEnum = {}));
const debug = (0, debug_1.default)('logger');
/*
 * Logger is a gateway to npmlog.
 * It is a workaround to log in jest test environment by forwarding the log to console.log
 * In productive mode, npmlog is called directly.
 * Logger makes it easy to set a source file specific prefix.
 */
class Logger {
    static { this.isInitialized = false; }
    constructor(prefix) {
        this.prefix = prefix;
    }
    static { this.logLevel = LogLevelEnum.notice; }
    log(level, message, ...args) {
        if (!Logger.isInitialized) {
            Logger.init();
        }
        if (process.env['JEST_WORKER_ID'] !== undefined) {
            (0, debug_1.default)(this.prefix)((0, util_1.format)(message, ...args));
        }
        else
            npmlog_1.default.log(level, this.prefix, message, ...args);
    }
    static init() {
        Logger.isInitialized = true;
        //log.level = Logger.logLevel
        if (process.env['JEST_WORKER_ID'] !== undefined) {
            npmlog_1.default.on('log', Logger.forwardToConsole);
        }
        else {
            Object.defineProperty(npmlog_1.default, 'heading', {
                get: () => {
                    var d = new Date();
                    return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
                },
            });
            //  log.headingStyle = { bg: '', fg: 'white' }
        }
    }
    static forwardToConsole(message) {
        debug(message.level + ' ' + message.prefix + ': ' + message.message);
    }
    log2File(message, ...args) {
        if (process.env['JEST_WORKER_ID'] !== undefined)
            fs_1.default.appendFileSync('test.log', (0, util_1.format)(message, ...args));
    }
}
exports.Logger = Logger;
//# sourceMappingURL=log.js.map