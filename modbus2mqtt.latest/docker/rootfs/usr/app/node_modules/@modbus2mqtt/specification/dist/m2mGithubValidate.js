"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.M2mGithubValidate = void 0;
const m2mgithub_1 = require("./m2mgithub");
const rest_1 = require("@octokit/rest");
let path = require('path');
const debug = require('debug')('m2mgithubvalidate');
class M2mGithubValidate {
    constructor(personalAccessToken) {
        this.octokit = null;
        if (personalAccessToken)
            this.octokit = new rest_1.Octokit({
                auth: personalAccessToken,
            });
    }
    listPullRequestFiles(owner, pull_number) {
        return new Promise((resolve, reject) => {
            this.octokit.pulls.listFiles({
                owner: m2mgithub_1.githubPublicNames.publicModbus2mqttOwner,
                repo: m2mgithub_1.githubPublicNames.modbus2mqttRepo,
                pull_number: pull_number,
            })
                .then((files) => {
                let f = [];
                files.data.forEach((file) => {
                    if (['added', 'modified', 'renamed', 'copied', 'changed'].includes(file.status))
                        f.push(file.filename);
                });
                resolve({ pr_number: pull_number, files: f });
            })
                .catch(reject);
        });
    }
    closePullRequest(pullNumber) {
        return new Promise((resolve, reject) => {
            this.octokit.pulls.update({
                owner: m2mgithub_1.githubPublicNames.publicModbus2mqttOwner,
                repo: m2mgithub_1.githubPublicNames.modbus2mqttRepo,
                pull_number: pullNumber,
                state: 'closed',
            })
                .then((res) => {
                this.octokit.issues.update({
                    owner: m2mgithub_1.githubPublicNames.publicModbus2mqttOwner,
                    repo: m2mgithub_1.githubPublicNames.modbus2mqttRepo,
                    issue_number: parseInt(path.basename(res.data.issue_url)),
                    state: 'closed',
                })
                    .then(() => {
                    resolve();
                })
                    .catch((e) => {
                    e.step = 'closeIssue';
                    reject(e);
                });
            })
                .catch((e) => {
                e.step = 'closePullRequest';
                reject(e);
            });
        });
    }
    addIssueComment(pullNumber, text) {
        return new Promise((resolve, reject) => {
            this.octokit.issues.createComment({
                owner: m2mgithub_1.githubPublicNames.publicModbus2mqttOwner,
                repo: m2mgithub_1.githubPublicNames.modbus2mqttRepo,
                issue_number: pullNumber,
                body: text,
            })
                .then(() => {
                resolve();
            })
                .catch((e) => {
                e.step = 'addIssueComment';
                reject(e);
            });
        });
    }
    mergePullRequest(pullNumber, title) {
        return new Promise((resolve, reject) => {
            this.octokit.pulls.merge({
                owner: m2mgithub_1.githubPublicNames.publicModbus2mqttOwner,
                repo: m2mgithub_1.githubPublicNames.modbus2mqttRepo,
                pull_number: pullNumber,
                commit_title: title,
                merge_method: 'squash',
            })
                .then(() => {
                resolve();
            })
                .catch((e) => {
                e.step = 'mergePullRequest';
                reject(e);
            });
        });
    }
}
exports.M2mGithubValidate = M2mGithubValidate;
//# sourceMappingURL=m2mGithubValidate.js.map