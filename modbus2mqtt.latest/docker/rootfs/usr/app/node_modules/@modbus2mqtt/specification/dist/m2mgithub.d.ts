import { Octokit } from '@octokit/rest';
export declare const githubPublicNames: {
    publicModbus2mqttOwner: string;
    modbus2mqttRepo: string;
    modbus2mqttBranch: string;
};
export interface ITreeParam {
    path: string;
    mode: '100644';
    type: 'blob';
    sha: string;
}
interface IPullRequestStatusInfo {
    merged: boolean;
    closed_at: string | null;
    html_url: string;
}
export declare class M2mGitHub {
    private publicRoot;
    private ownOwner;
    protected octokit: Octokit | null;
    private static forking;
    private isRunning;
    private waitFinished;
    private findOrCreateOwnModbus2MqttRepo;
    hasSpecBranch(branch: string): Promise<boolean>;
    deleteSpecBranch(branch: string): Promise<void>;
    private createOwnModbus2MqttRepo;
    private checkRepo;
    private waitForOwnModbus2MqttRepo;
    constructor(personalAccessToken: string | null, publicRoot: string);
    fetchPublicFiles(): void;
    static getPullRequestUrl(pullNumber: number): string;
    createPullrequest(title: string, content: string, branchName: string): Promise<number>;
    getPullRequest(pullNumber: number): Promise<IPullRequestStatusInfo>;
    getInfoFromError(e: any): string;
    private uploadFileAndCreateTreeParameter;
    init(): Promise<boolean>;
    deleteRepository(): Promise<void>;
    private checkFiles;
    commitFiles(root: string, branchName: string, files: string[], title: string, message: string): Promise<string>;
}
export {};
