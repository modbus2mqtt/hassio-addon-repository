import { IspecificationValidator, IvalidateIdentificationResult } from './ispecificationvalidator';
import { Idata, IfileSpecification } from './ifilespecification';
import { Imessage, VariableTargetParameters } from '@modbus2mqtt/specification.shared';
import { ReadRegisterResult } from './converter';
import { Ispecification, IbaseSpecification, ImodbusSpecification, SpecificationFileUsage, ImodbusEntity } from '@modbus2mqtt/specification.shared';
import { Observable } from 'rxjs';
import { IpullRequest } from './m2mGithubValidate';
export interface IReadRegisterResultOrError {
    result?: ReadRegisterResult;
    error?: Error;
}
export interface ImodbusValues {
    holdingRegisters: Map<number, IReadRegisterResultOrError>;
    analogInputs: Map<number, IReadRegisterResultOrError>;
    coils: Map<number, IReadRegisterResultOrError>;
    discreteInputs: Map<number, IReadRegisterResultOrError>;
}
export declare function emptyModbusValues(): ImodbusValues;
export declare class M2mSpecification implements IspecificationValidator {
    private settings;
    private differentFilename;
    private notBackwardCompatible;
    private ghPollInterval;
    private ghPollIntervalIndex;
    private ghPollIntervalIndexCount;
    private static ghContributions;
    constructor(settings: Ispecification | ImodbusEntity[]);
    static messages2Text(spec: IbaseSpecification, msgs: Imessage[]): string;
    contribute(note: string | undefined): Promise<number>;
    private generateAddedContributionMessage;
    private generateClonedContributionMessage;
    static getMessageString(spec: IbaseSpecification, message: Imessage): string;
    private static getMessageLocal;
    private static handleCloseContributionError;
    static closeContribution(spec: IfileSpecification): Promise<IpullRequest>;
    getSpecificationsFilesList(localDir: string): string[];
    validate(language: string): Imessage[];
    validateUniqueName(language: string): boolean;
    private static setIdentifiedByEntities;
    static fileToModbusSpecification(inSpec: IfileSpecification, values?: ImodbusValues): ImodbusSpecification;
    static copyModbusDataToEntity(spec: Ispecification, entityId: number, values: ImodbusValues): ImodbusEntity;
    private static copyFromTestData;
    validateIdentification(language: string): IvalidateIdentificationResult[];
    allNullDataMatch(datas: Idata[] | undefined, values: Map<number, IReadRegisterResultOrError>): boolean;
    allNullValuesMatch(spec: IfileSpecification, values: ImodbusValues): boolean;
    private getPropertyFromVariable;
    private getEntityFromId;
    static getFileUsage(url: string): SpecificationFileUsage;
    getUom(entityId: number): string | undefined;
    getMultiplier(entityId: number): number | undefined;
    getDecimals(entityId: number): number | undefined;
    getOffset(entityId: number): number | undefined;
    isVariable(checkParameter: VariableTargetParameters): boolean;
    isEqualValue(v1: any, v2: any): boolean;
    isEqual(other: Ispecification): Imessage[];
    validateFiles(msgs: Imessage[]): void;
    validateSpecification(language: string, forContribution?: boolean): Imessage[];
    getBaseFilename(filename: string): string;
    private static pollingTimeout;
    static startPolling(specfilename: string, error: (e: any) => void): Observable<IpullRequest> | undefined;
    static getNextCheck(specfilename: string): string;
    static triggerPoll(specfilename: string): void;
    static msToTime(ms: number): string;
    private static inCloseContribution;
    private static poll;
}
