"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextConverter = void 0;
const converter_1 = require("./converter");
const specification_shared_1 = require("@modbus2mqtt/specification.shared");
class TextConverter extends converter_1.Converter {
    constructor(component) {
        if (!component)
            component = 'text';
        super(component);
    }
    getStringlength(entity) {
        if (entity.converterParameters && 'stringlength' in entity.converterParameters && entity.converterParameters.stringlength)
            return entity.converterParameters.stringlength;
        return 0;
    }
    getModbusLength(entity) {
        return this.getStringlength(entity) / 2;
    }
    modbus2mqtt(spec, entityid, value) {
        let entity = spec.entities.find((e) => e.id == entityid);
        if (entity && entity.converter.name === 'value' && entity.converterParameters && entity.converterParameters.value)
            return entity.converterParameters.value;
        let idx = value.buffer.findIndex((v) => v == 0);
        if (idx >= 0)
            return value.buffer.subarray(0, idx).toString();
        return value.buffer.toString();
    }
    getModbusRegisterTypes() {
        return [specification_shared_1.ModbusRegisterType.HoldingRegister, specification_shared_1.ModbusRegisterType.AnalogInputs];
    }
    mqtt2modbus(spec, entityid, _value) {
        let entity = spec.entities.find((e) => e.id == entityid);
        if (!entity)
            throw new Error('entity not found in entities');
        let rc = [];
        for (let i = 0; i < _value.length; i += 2) {
            if (i + 1 < _value.length)
                rc.push((_value.charCodeAt(i) << 8) | _value.charCodeAt(i + 1));
            else
                rc.push(_value.charCodeAt(i) << 8);
        }
        return {
            data: rc,
            buffer: Buffer.from(_value),
        };
    }
    getParameterType(_entity) {
        return 'Itext';
    }
}
exports.TextConverter = TextConverter;
//# sourceMappingURL=textConverter.js.map